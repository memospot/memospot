name: Build (Release)
on:
  push:
    tags-ignore:
      - "v*.*.*-*"
  workflow_dispatch:

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

env:
  CACHE_KEY: NOT_SET
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GLIBC_VERSION: NOT_SET
  LATEST_MEMOS_VERSION: NOT_SET
  RUST_TARGET: NOT_SET
  RUST_BACKTRACE: short
  RUST_TOOLCHAIN: stable
  RUSTFLAGS: -Copt-level=3 -Cstrip=symbols -Ccodegen-units=1
  APT_DEPS: >-
    build-essential
    curl
    file
    patchelf
    wget
    libayatana-appindicator3-dev
    libgtk-3-dev
    librsvg2-dev
    libssl-dev
    libwebkit2gtk-4.1-dev
    libxdo-dev

jobs:
  publish-release:
    name: Publish
    permissions: { contents: write }
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { runner: macos-13, rust_target: aarch64-apple-darwin }
          - { runner: macos-13, rust_target: x86_64-apple-darwin }
          - { runner: ubuntu-22.04, rust_target: x86_64-unknown-linux-gnu }
          - { runner: windows-2022, rust_target: x86_64-pc-windows-msvc }

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: "Set env vars"
        shell: bash
        run: |
          echo "RUST_TARGET=${{ matrix.platform.rust_target }}" >> $GITHUB_ENV
          echo "CACHE_KEY=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "GLIBC_VERSION=$(ldd --version | head -n 1 | awk '{print $NF}')" >> $GITHUB_ENV
          latest_memos_version=$(curl -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' -H 'X-GitHub-Api-Version: 2022-11-28' -s --url "https://api.github.com/repos/memospot/memos-builds/releases/latest" | jq -r '.tag_name')
          if [ -z "$latest_memos_version" ] || [ "$latest_memos_version" = "null" ]; then
            latest_memos_version="NOT_SET"
          fi
          echo "LATEST_MEMOS_VERSION=$latest_memos_version" >> $GITHUB_ENV

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Disable initramfs and man-db update"
        continue-on-error: true
        run: |
          sudo mkdir -p /etc/initramfs-tools/
          echo -e 'update_initramfs=no\nbackup_initramfs=no' | sudo tee /etc/initramfs-tools/update-initramfs.conf
          sudo rm -f /var/lib/man-db/auto-update

      - if: ${{ runner.os == 'Linux'  }}
        name: "[Linux] Install platform dependencies"
        uses: awalsh128/cache-apt-pkgs-action@7ca5f46d061ad9aa95863cd9b214dd48edef361d
        with: { packages: "${{env.APT_DEPS}}" }

      - if: ${{ runner.os == 'macOS' }}
        name: "[macOS] Install platform dependencies"
        uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd
        with: { xcode-version: "latest-stable" }

      - if: ${{ runner.os == 'Linux' }}
        name: "[Linux] Install UPX"
        uses: crazy-max/ghaction-upx@db8cc9515a4a7ea1b312cb82fbeae6d716daf777
        with: { install-only: true }

      - name: Install Just
        uses: taiki-e/install-action@735e5933943122c5ac182670a935f54a949265c1
        with: { tool: just@1.39.0 }

      # Rust
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b
        with:
          targets: ${{ runner.os == 'macOS' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}
          toolchain: ${{ env.RUST_TOOLCHAIN }}

      - name: Setup Cargo cache
        uses: swatinem/rust-cache@98c8021b550208e191a6a3145459bfc9fb29c4c0
        with:
          prefix-key: cargo
          key: ${{ env.GLIBC_VERSION }}
      # /Rust

      # Bun
      - uses: oven-sh/setup-bun@v2
        with: { bun-version: latest }

      - # node_modules is not cached on Windows as it breaks subsequent runs
        if: ${{ runner.os != 'Windows' }}
        name: Cache node_modules
        uses: actions/cache@v4
        with:
          key: node_modules-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
          restore-keys: node_modules-${{ runner.os }}
          path: |
            ${{github.workspace}}/node_modules
            ${{github.workspace}}/**/node_modules

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          key: bundeps-${{ runner.os }}-${{ hashFiles('**/bun.lock', '**/package.json') }}
          restore-keys: bundeps-${{ runner.os }}
          path: ~/.bun

      - name: Install Bun dependencies
        run: just deps-ts
      # /Bun

      - name: Cache Memos builds
        uses: actions/cache@v4
        with:
          key: memosbuilds-${{ runner.os }}-${{ env.LATEST_MEMOS_VERSION }}-${{ env.CACHE_KEY }}
          restore-keys: memosbuilds-${{ runner.os }}-${{ env.LATEST_MEMOS_VERSION }}
          path: ./server-dist

      - name: Build Tauri App
        uses: tauri-apps/tauri-action@42e9df6c59070d114bf90dcd3943a1b8f138b113
        env:
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: v__VERSION__
          releaseName: "v__VERSION__"
          # This will also show on the updater notes.
          releaseBody: |
            Bundled Memos version: **${{ env.LATEST_MEMOS_VERSION }}**
            Updating from previous versions is transparent.

            Note for Windows users:
            The auto-updater will use the `exe` installer (per-user install).
            For the MSI package, check the GitHub releases page.
          releaseDraft: true
          prerelease: false
          args: --target ${{ matrix.platform.rust_target }}
          includeUpdaterJson: true
          updaterJsonPreferNsis: true
          retryAttempts: 2
